Problem Link

https://www.hackerearth.com/practice/data-structures/trees/binary-and-nary-trees/practice-problems/algorithm/mancunian-and-colored-tree/

Problem code

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>  
#include <functional>
#include <bits/stdc++.h>
using namespace __gnu_pbds;
using namespace std;
typedef long l;
typedef long long ll;
typedef vector<int> vi;
typedef vector<l> vl;
typedef vector<long long> vll;
typedef pair<int,int> pi;
typedef pair<l,l> pl;
typedef set<int> si;
typedef set<l> sl;
typedef multiset<int> msi;
typedef multiset<l> msl;
template <typename T>
using indexed_set = tree<T, null_type, less<T>, 
	rb_tree_tag, tree_order_statistics_node_update>;  
// order_of_key: The number of items in a set that are strictly smaller than k
// find_by_order: It returns an iterator to the ith largest element
//Satyam Chaudhary https://github.com/satyam3976
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define lb lower_bound
#define ub upper_bound
#define beg(x) x.begin()
#define en(x) x.end()
#define all(v) beg(v), en(v)
#define f(i,s,n) for(l i=s;i<n;i++)
#define fe(i,s,n) for(l i=s;i<=n;i++)
#define fr(i,s,n) for(l i=s;i>n;i--)
#define fre(i,s,n) for(l i=s;i>=n;i--)
const l MOD = 998244353;
 
#define SIZE 100005
int n, C, col[SIZE], ans[SIZE];
vector<int> adj[SIZE];
stack<int> st[SIZE];
 
void dfs(int v)
{
    if(st[col[v]].empty())
    {
        ans[v]=-1;
    }
    else{
        ans[v]=st[col[v]].top();
    }
    st[col[v]].push(v);
    for(int i=0;i<int(adj[v].size());i++)
    {
        ll vv=adj[v][i];
        dfs(vv);
    }
    st[col[v]].pop();
}
 
int main()
{
    ll n,c;
    cin>>n>>c;
    fe(i,2,n)
    {
        ll a;
        cin>>a;
        adj[a].pb(i);
    }
    for(int i=1;i<=n;i++)
    {
        cin>>col[i];
    }
    dfs(1);
    for(int i=1;i<=n;i++)
    {
        cout<<ans[i]<<" ";
    }
    return 0;
}
