Problem link

https://www.hackerearth.com/practice/data-structures/trees/binary-and-nary-trees/practice-problems/algorithm/mirror-image-2/

Problem code

#include<bits/stdc++.h>

using namespace std;
#define ll long long

struct Node{
    ll key;
    struct Node* left;
    struct Node* right;
};

typedef struct Node* node;

node createnode(ll n)
{
    node ptr;
    ptr=(node)malloc(sizeof(struct Node));
    ptr->key=n;
    ptr->left=NULL;
    ptr->right=NULL;
    return(ptr);
}

node temp=NULL;

void search(ll val,node p)
{
    if(p==NULL)
    {
        return;
    }
    else{
        search(val,p->left);
        if(p->key==val)
        {
            temp=p;
        }
        search(val,p->right);
    }
}

ll mirror(node tree1,node tree2,ll num,ll x)
{
    if((tree1==NULL || tree2==NULL))
    {
        return -1;
    }
    else{
        if(tree1->key==num)
        return(tree2->key);
        if(tree2->key==num)
        return tree1->key;
        int ans=(mirror(tree1->left,tree2->right,num,0));
        if(ans!=-1)
        return ans;
        return mirror(tree1->right,tree2->left,num,1);
    }
}

int main()
{
    ll n,q,mi,num;
    cin>>n>>q;
    ll a,b;
    char ch;
    cin>>a>>b>>ch;
    node tree=createnode(a);
    if(ch=='L')
    {
        tree->left=createnode(b);
    }
    else{
        tree->right=createnode(b);
    }
    n=n-2;
    for(int i=0;i<n;i++)
    {
        cin>>a>>b>>ch;
        search(a,tree);
        if(ch=='L')
        {
            temp->left=createnode(b);
        }
        else{
            temp->right=createnode(b);
        }
        temp=NULL;
    }
    cout<<endl;
    while(q--)
    {
        cin>>num;
        mi=mirror(tree,tree,num,1);
        cout<<mi<<endl;
    }
    return 0;
}
























